//Generic Binary Tree
class TreeNode {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

function buildTreeFromArray(arr, index = 0) {
    if (index >= arr.length || arr[index] === null) {
        return null;
    }

    const node = new TreeNode(arr[index]);
    node.left = buildTreeFromArray(arr, 2 * index + 1);
    node.right = buildTreeFromArray(arr, 2 * index + 2);

    return node;
}

function inorderTraversal(root, result = []) {
    if (root !== null) {
      if(root.left === null && root.right === null){
        result.push(root.value)
      }
        inorderTraversal(root.left, result);
        // result.push(root.value);
        // console.log(root.value)
        inorderTraversal(root.right, result);
    }
    return result;
}

function printTree(root, prefix = "", isLeft = true) {
    if (root !== null) {
        console.log(prefix + (isLeft ? "├── " : "└── ") + root.value);
        const newPrefix = prefix + (isLeft ? "│   " : "    ");
        printTree(root.left, newPrefix, true);
        printTree(root.right, newPrefix, false);
    }
    return 0
}

const inputArray = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8];
const root = buildTreeFromArray(inputArray);

const inorderResult = inorderTraversal(root);
console.log("Inorder Traversal:", inorderResult);
console.log(printTree(root))




// Simple BINARY SEARCH TREE
class TreeNode {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinaryTree {
  constructor() {
    this.root = null;
  }

  insert(value) {
    const newNode = new TreeNode(value);
    if (!this.root) {
      this.root = newNode;
      return;
    }

    let current = this.root;
    while (true) {
      if (value < current.value) {
        if (!current.left) {
          current.left = newNode;
          return;
        }
        current = current.left;
      } else {
        if (!current.right) {
          current.right = newNode;
          return;
        }
        current = current.right;
      }
    }
  }

  search(value) {
    let current = this.root;
    while (current) {
      if (value === current.value) {
        return true;
      } else if (value < current.value) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }
}



// Hash map - separate chaining collision handling and load factor
class HashMap {
  constructor(initialCapacity = 10, loadFactor = 0.75) {
    this.buckets = new Array(initialCapacity).fill(null).map(() => []);
    this.size = 0;
    this.loadFactor = loadFactor;
    this.threshold = initialCapacity * loadFactor;
    this.initialCapacity = initialCapacity

  }

  _hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash = (hash + key.charCodeAt(i)) % this.buckets.length;
    }
    return hash;
  }

  set(key, value) {
    const index = this._hash(key);
    const bucket = this.buckets[index];

    for (const entry of bucket) {
      if (entry.key === key) {
        entry.value = value;
        return;
      }
    }

    bucket.push({ key, value });
    this.size++;

    if (this.size > this.threshold) {
      this._resize();
    }
  }

  get(key) {
    const index = this._hash(key);
    const bucket = this.buckets[index];

    for (const entry of bucket) {
      if (entry.key === key) {
        return entry.value;
      }
    }

    return undefined;
  }

  delete(key) {
    const index = this._hash(key);
    const bucket = this.buckets[index];

    for (let i = 0; i < bucket.length; i++) {
      if (bucket[i].key === key) {
        bucket.splice(i, 1);
        this.size--;
        return true;
      }
    }

    return false;
  }

  _resize() {
    console.log("Threshold reached - resizing started")
    this.initialCapacity = this.buckets.length * 2;
    const newBuckets = new Array(this.initialCapacity).fill(null).map(() => []);

    for (const bucket of this.buckets) {
      for (const entry of bucket) {
        const newIndex = this._hash(entry.key, this.initialCapacity);
        newBuckets[newIndex].push(entry);
      }
    }

    this.buckets = newBuckets;
    this.threshold = this.initialCapacity * this.loadFactor;
    console.log("resizing completed")
  }
}



// Hash map - open addressing with linear probing collision handling
class HashMap {
  constructor(size = 10) {
    this.size = size;
    this.keys = new Array(size);
    this.values = new Array(size);
  }

  _hash(key) {
    let hash = 0;
    for (const char of key) {
      hash += char.charCodeAt(0);
    }
    return hash % this.size;
  }

  set(key, value) {
    let index = this._hash(key);

    while (this.keys[index] !== undefined) {
      if (this.keys[index] === key) {
        this.values[index] = value;
        return;
      }
      index = (index + 1) % this.size;
    }

    this.keys[index] = key;
    this.values[index] = value;
  }

  get(key) {
    let index = this._hash(key);

    while (this.keys[index] !== undefined) {
      if (this.keys[index] === key) {
        return this.values[index];
      }
      index = (index + 1) % this.size;
    }
    return undefined;
  }

  delete(key) {
    let index = this._hash(key);

    while (this.keys[index] !== undefined) {
      if (this.keys[index] === key) {
        this.keys[index] = undefined;
        this.values[index] = undefined;
        return;
      }
      index = (index + 1) % this.size;
    }
  }
}

